@page "/"
@using music_manager_starter.Shared
@inject HttpClient Http

@code {
    private List<Song> songs;
    private List<Song> filteredSongs;
    private Dictionary<Guid, byte> songRatings = new Dictionary<Guid, byte>();  

    [CascadingParameter] public string SearchQuery { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        // Fetch the song data from the API
        songs = await Http.GetFromJsonAsync<List<Song>>("api/songs");
        filteredSongs = songs;

        // Initialize ratings for each song
        foreach (var song in songs)
        {
            if (!songRatings.ContainsKey(song.Id))
            {
                songRatings[song.Id] = 0; // Default to no rating
            }
        }
    }
    

    // Method to filter songs based on the search query
    private void FilterSongs()
    {
        if (string.IsNullOrEmpty(SearchQuery))
        {
            // Show all songs if search query is empty
            filteredSongs = songs;
        }
        else
        {
            // Filter songs by title, artist, or album
            filteredSongs = songs
                .Where(song => song.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                               song.Artist.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                               song.Album.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    
    protected override void OnParametersSet()
    {
        FilterSongs(); 
    }

    private async Task SubmitRating(Guid songId)
    {
        var rating = songRatings[songId];  

        if (rating < 1 || rating > 5)
        {

            Console.WriteLine("Please enter a rating between 1 and 5.");
            return; 
        }

        await Http.PostAsJsonAsync($"api/songs/{songId}/ratings", rating);

        songs = await Http.GetFromJsonAsync<List<Song>>("api/songs");

        FilterSongs();
    }
}

<div class="p-0 min-h-screen bg-pattern flex flex-col items-center justify-center">
    <h2 class="text-3xl font-bold text-white mb-8 text-center">Song Library</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
        @if (filteredSongs != null && filteredSongs.Count > 0)
        {
            @foreach (var song in filteredSongs)
            {
                <div class="glass p-6 border border-gray-300 rounded-lg text-white transition-transform transform hover:scale-105 hover:shadow-xl cursor-pointer">
                    <h3 class="text-xl font-semibold mb-2">@song.Title</h3>
                    <p class="text-md">Artist: <span class="font-light">@song.Artist</span></p>
                    <p class="text-md">Average Rating: <span class="font-light">@Math.Round(song.AverageRating, 1)</span></p>

                    <!-- Rating input for this specific song -->
                    <input id="ratingInput" 
                           type="number" 
                           min="1" 
                           max="5" 
                           style="color:black"
                           @bind="songRatings[song.Id]" />

                    <button @onclick="() => SubmitRating(song.Id)" class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Submit</button>
                </div>
            }
        }
        else
        {
            <div class="col-span-1 text-center text-gray-400">No songs found.</div>
        }
    </div>
</div>